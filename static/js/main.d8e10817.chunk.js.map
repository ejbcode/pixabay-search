{"version":3,"sources":["componentes/Error.js","componentes/Form.js","componentes/Images.js","componentes/ListOfImages.js","App.js","serviceWorker.js","index.js"],"names":["Error","error","className","role","Form","setSearch","setPage","useState","keyword","setKeyword","setError","onSubmit","event","preventDefault","trim","type","placeholder","onChange","target","value","Images","item","tags","previewURL","src","alt","ListOfImages","data","map","href","largeImageURL","rel","key","id","App","search","setData","page","totalPages","setTotalPages","URL","useEffect","a","fetch","response","json","result","hits","Math","ceil","totalHits","dataFromApi","onClick","actualPage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.d8e10817.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Error = ({ error }) => {\r\n  return (\r\n    <p className=\"alert alert-danger\" role=\"alert\">\r\n      {error}\r\n    </p>\r\n  );\r\n};\r\n\r\nexport default Error;\r\n","import React, { useState } from 'react';\r\nimport Error from './Error';\r\n\r\nconst Form = ({ setSearch, setPage }) => {\r\n  const [keyword, setKeyword] = useState('');\r\n  const [error, setError] = useState(false);\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    if (keyword.trim() === '') {\r\n      setError(true);\r\n      return;\r\n    }\r\n    setError(false);\r\n    setSearch(keyword);\r\n    setPage(1);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div className=\"row\">\r\n        <div className=\"form-group col-md-8\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control form-control-lg\"\r\n            placeholder=\"What are you looking for?\"\r\n            onChange={(event) => setKeyword(event.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"form-group col-md-4\">\r\n          <input\r\n            type=\"submit\"\r\n            className=\"btn btn-lg btn-primary btn-block\"\r\n            value=\"Find\"\r\n          />\r\n        </div>\r\n      </div>\r\n      {error && <Error error=\"Please fill the input with a keyword\" />}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from 'react';\r\n\r\nconst Images = ({ ...item }) => {\r\n  // const { previewURL, tags, likes, views, largeImageURL } = item;\r\n  const { tags, previewURL } = item;\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <img src={previewURL} alt={tags} className=\"card-img-top\" />\r\n      <div className=\"card-body\">\r\n        <p className=\"card-text\">{tags}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Images;\r\n","import React from 'react';\r\nimport Images from './Images';\r\n\r\nconst ListOfImages = ({ data }) => {\r\n  return (\r\n    <div className=\"card-columns\">\r\n      {data.map((item) => (\r\n        <a href={item.largeImageURL} target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <Images key={item.id} {...item} />\r\n        </a>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ListOfImages;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Form from './componentes/Form';\r\nimport ListOfImages from './componentes/ListOfImages';\r\n\r\nfunction App() {\r\n  const [search, setSearch] = useState('');\r\n  const [data, setData] = useState([]);\r\n  const [page, setPage] = useState(1);\r\n  const [totalPages, setTotalPages] = useState(1);\r\n\r\n  const imgPerPage = 20;\r\n  const KEY = '17527816-68d8832ae994a8ecc8b573c40';\r\n  const URL = `https://pixabay.com/api/?key=${KEY}&q=${search}&per_page=${imgPerPage}&page=${page}`;\r\n\r\n  useEffect(() => {\r\n    const dataFromApi = async () => {\r\n      if (search === '') return;\r\n\r\n      const response = await fetch(URL);\r\n      const result = await response.json();\r\n      setData(result.hits);\r\n      setTotalPages(Math.ceil(result.totalHits / imgPerPage));\r\n    };\r\n    dataFromApi();\r\n  }, [URL, page, search]);\r\n\r\n  const handlePreviousClick = () => {\r\n    const actualPage = page - 1;\r\n    if (actualPage === 0) return;\r\n    setPage(actualPage);\r\n  };\r\n  const handleNextClick = () => {\r\n    const actualPage = page + 1;\r\n    if (actualPage > totalPages) return;\r\n    setPage(actualPage);\r\n  };\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"jumbotron py-2\">\r\n        <h2 className=\"text-center\">Search for Image</h2>\r\n        <Form setSearch={setSearch} setPage={setPage} />\r\n      </div>\r\n      <div className=\"row justify-content-center p-3\">\r\n        <ListOfImages data={data} />\r\n        {page === 1 ? null : (\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-info mr-1\"\r\n            onClick={handlePreviousClick}\r\n          >\r\n            &laquo; Previous\r\n          </button>\r\n        )}\r\n\r\n        {page === totalPages ? null : (\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-info \"\r\n            onClick={handleNextClick}\r\n          >\r\n            Next &raquo;\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}